#!/bin/bash

# Cashio Development Workflow Script
# This script helps manage the development environment and workflow

set -e

# Configuration
CASHIO_DIR="/Users/venkatn/Dev/repos/jmos/cashio"
CASHIO_API_DIR="/Users/venkatn/Dev/repos/jmos/cashio-api"
CASHIO_UI_DIR="/Users/venkatn/Dev/repos/jmos/cashio-ui"
CASHIO_DB_BACKUP_DIR="$CASHIO_DIR/backup"
CASHIO_DB_BACKUP_FILE="cashio-db.backup"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
print_header() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}========================================${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

# Function to setup development environment
setup_dev() {
    print_header "Setting up Development Environment"

    # Copy environment files if they don't exist
    if [ ! -f "$CASHIO_DIR/.env" ]; then
        cp "$CASHIO_DIR/dotenv-template-dev" "$CASHIO_DIR/.env"
        print_success "Created .env from dotenv-template-dev"
    else
        print_warning ".env already exists, skipping"
    fi

    if [ ! -f "$CASHIO_API_DIR/.env" ]; then
        cp "$CASHIO_DIR/dotenv-template-dev" "$CASHIO_API_DIR/.env"
        print_success "Created cashio-api/.env from dotenv-template-dev"
    else
        print_warning "cashio-api/.env already exists, skipping"
    fi

    if [ ! -f "$CASHIO_UI_DIR/.env" ]; then
        cp "$CASHIO_UI_DIR/dotenv-template-dev" "$CASHIO_UI_DIR/.env"
        print_success "Created cashio-ui/.env from dotenv-template-dev"
    else
        print_warning "cashio-ui/.env already exists, skipping"
    fi

    # Setup Python virtual environment for API
    if [ ! -d "$CASHIO_API_DIR/.venv" ]; then
        cd "$CASHIO_API_DIR"
        python3 -m venv .venv
        print_success "Created Python virtual environment in $CASHIO_API_DIR/.venv"

        # Install Python dependencies
        print_warning "Installing Python dependencies..."
        source .venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        deactivate
        print_success "Python dependencies installed"
    else
        print_warning "Python virtual environment already exists, checking dependencies..."
        cd "$CASHIO_API_DIR"
        source .venv/bin/activate
        # Check if uvicorn is installed
        if ! python -c "import uvicorn" 2>/dev/null; then
            print_warning "Dependencies missing, installing..."
            pip install --upgrade pip
            pip install -r requirements.txt
            print_success "Python dependencies installed"
        else
            print_success "Python dependencies already installed"
        fi
        deactivate
    fi

    # Setup Node.js dependencies for UI
    print_header "Setting up Node.js Dependencies"
    if [ ! -d "$CASHIO_UI_DIR/node_modules" ]; then
        cd "$CASHIO_UI_DIR"
        print_warning "Installing Node.js dependencies..."
        npm install
        print_success "Node.js dependencies installed"
    else
        print_success "Node.js dependencies already installed"
    fi

    # Ensure certificates exist
    if [ ! -d "$CASHIO_DIR/certs" ]; then
        mkdir -p "$CASHIO_DIR/certs"
        print_warning "Certificates directory created. You may need to generate SSL certificates."
        print_warning "Run: ./dev-workflow setup-certs"
    fi

    print_success "Development environment setup complete!"
}

# Function to setup SSL certificates for development
setup_certs() {
    print_header "Setting up SSL Certificates"

    cd "$CASHIO_DIR"

    # Check if certificates already exist
    if [ -f "certs/ca-cert.pem" ] && [ -f "certs/ca-key.pem" ] && [ -f "certs/cert.pem" ] && [ -f "certs/key.pem" ]; then
        print_success "SSL certificates already exist, skipping generation"
        print_warning "To regenerate certificates, remove the certs directory first: rm -rf certs"
        return 0
    fi

    # Ensure certs directory exists
    mkdir -p certs

    # Generate Root CA Certificate
    if [ ! -f "certs/ca-cert.pem" ] || [ ! -f "certs/ca-key.pem" ]; then
        print_warning "Generating Root CA Certificate..."
        openssl genpkey -algorithm RSA -out certs/ca-key.pem
        openssl req -x509 -new -key certs/ca-key.pem -days 3650 -out certs/ca-cert.pem -subj "/CN=Cashio Dev CA"
        print_success "Root CA Certificate generated"
    else
        print_success "Root CA Certificate already exists"
    fi

    # Generate Server Certificate
    if [ ! -f "certs/key.pem" ]; then
        print_warning "Generating Server private key..."
        openssl genpkey -algorithm RSA -out certs/key.pem
        print_success "Server private key generated"
    else
        print_success "Server private key already exists"
    fi

    # Create server config
    cat > certs/server.cnf << EOF
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
CN = cashio.local

[v3_req]
basicConstraints = CA:FALSE
keyUsage = digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = cashio.local
DNS.2 = localhost
IP.1 = 127.0.0.1
EOF

    # Create and sign certificate
    openssl req -new -key certs/key.pem -out certs/server.csr -config certs/server.cnf
    openssl x509 -req -in certs/server.csr -CA certs/ca-cert.pem -CAkey certs/ca-key.pem -CAcreateserial -out certs/cert.pem -days 365 -extensions v3_req -extfile certs/server.cnf

    print_success "SSL certificates generated!"
    print_warning "Don't forget to add certs/ca-cert.pem to your browser's trusted certificates"
    print_warning "Add '127.0.0.1 cashio.local' to your /etc/hosts file"
}

# Function to run local development servers (without Docker)
start_local() {
    print_header "Starting Local Development Servers"

    # Check if virtual environment exists
    if [ ! -d "$CASHIO_API_DIR/.venv" ]; then
        print_error "Python virtual environment not found!"
        print_warning "Please run './dev-workflow setup-dev' first to set up the environment"
        exit 1
    fi

    # Start database only via Docker
    cd "$CASHIO_DIR"
    docker compose -f docker-compose.yaml up -d cashio-db

    print_success "Database started via Docker"

    # Start API locally with virtual environment
    print_header "Starting API Server (local)"
    cd "$CASHIO_API_DIR"
    # Activate virtual environment and start uvicorn in background
    source .venv/bin/activate
    python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 &
    API_PID=$!
    echo $API_PID > /tmp/cashio-api.pid
    print_success "API server started (PID: $API_PID)"

    # Start UI locally
    print_header "Starting UI Server (local)"
    cd "$CASHIO_UI_DIR"
    npm run dev -- --port 3000 &
    UI_PID=$!
    echo $UI_PID > /tmp/cashio-ui.pid
    print_success "UI server started (PID: $UI_PID)"

    print_success "Local development servers started!"
    echo -e "${BLUE}Frontend:${NC} http://localhost:3000"
    echo -e "${BLUE}API:${NC} http://localhost:8000"
    echo -e "${BLUE}Database:${NC} localhost:5432"
}

# Function to stop local development servers
stop_local() {
    print_header "Stopping Local Development Servers"

    # Stop API server
    if [ -f /tmp/cashio-api.pid ]; then
        API_PID=$(cat /tmp/cashio-api.pid)
        kill $API_PID 2>/dev/null && print_success "API server stopped" || print_warning "API server already stopped"
        rm -f /tmp/cashio-api.pid
    fi

    # Stop UI server
    if [ -f /tmp/cashio-ui.pid ]; then
        UI_PID=$(cat /tmp/cashio-ui.pid)
        kill $UI_PID 2>/dev/null && print_success "UI server stopped" || print_warning "UI server already stopped"
        rm -f /tmp/cashio-ui.pid
    fi

    # Stop database
    cd "$CASHIO_DIR"
    docker compose -f docker-compose.yaml stop cashio-db
    print_success "Database stopped"
}

# Function to test the full integration
test_integration() {
    print_header "Testing Integration"

    cd "$CASHIO_DIR"

    print_warning "Make sure to manually update submodules to desired commits/tags before running this!"
    echo ""

    # Show current submodule status
    print_header "Current Submodule Status"
    git submodule status
    echo ""

    # Build and test with production-like setup
    print_warning "Building Docker containers with current submodule code..."
    docker compose -f docker-compose.yaml build
    docker compose -f docker-compose.yaml up -d

    print_success "Integration test environment started!"
    echo -e "${BLUE}Test at:${NC} https://cashio.local"
    print_warning "This is using whatever code is currently in the submodules"
    print_warning "After testing, run './dev-workflow cleanup-test' to return to development mode"
}

# Function to cleanup after integration test
cleanup_test() {
    print_header "Cleaning up Integration Test"

    cd "$CASHIO_DIR"
    docker compose -f docker-compose.yaml down

    print_success "Integration test environment cleaned up!"
}

# Funciton to restore postgres database from backup
restore_database() {
    # Load postgres environment variables from .env
    if [ -f "$CASHIO_DIR/.env" ]; then
        export $(grep '^POSTGRES_' "$CASHIO_DIR/.env" | xargs)
    else
        print_error "No .env file found in $CASHIO_DIR"
        print_warning "Please run './dev-workflow setup-dev' first to set up the environment"
        exit 1
    fi

    # Drop database
    DKR_OPTS=(
        "--rm"
        "--network" "host"
        "-e" "PGPASSWORD=$POSTGRES_PASSWORD"
    )
    DKR_CMD_DROP=(
        "psql"
        "-h" "$POSTGRES_HOST"
        "-U" "$POSTGRES_USER"
        "-c" "DROP DATABASE IF EXISTS $POSTGRES_DB WITH (FORCE);"
        "postgres"
    )
    echo "Dropping $POSTGRES_DB database..."
    docker run "${DKR_OPTS[@]}" postgres:latest "${DKR_CMD_DROP[@]}"

    # Create database
    DKR_CMD_CREATE=(
        "psql"
        "-h" "$POSTGRES_HOST"
        "-U" "$POSTGRES_USER"
        "-c" "CREATE DATABASE $POSTGRES_DB;"
        "postgres"
    )
    echo "Creating $POSTGRES_DB database..."
    docker run "${DKR_OPTS[@]}" postgres:latest "${DKR_CMD_CREATE[@]}"

    # Restore database
    DKR_OPTS_RESTORE=(
        "--rm"
        "-v" "$CASHIO_DB_BACKUP_DIR:/backup"
        "--network" "host"
        "-e" "PGPASSWORD=$POSTGRES_PASSWORD"
    )
    DKR_CMD_RESTORE=(
        "pg_restore"
        "-h" "$POSTGRES_HOST"
        "-U" "$POSTGRES_USER"
        "-d" "$POSTGRES_DB"
        "--no-owner"
        "-F" "c"
        "/backup/$CASHIO_DB_BACKUP_FILE"
    )
    echo "Restoring $POSTGRES_DB database from backup..."
    docker run "${DKR_OPTS_RESTORE[@]}" postgres:latest "${DKR_CMD_RESTORE[@]}"
    echo "$POSTGRES_DB database has been reset and restored from backup."
}

# Function to create releases locally
release() {
    print_header "Creating Local Releases"

    print_warning "This function creates local releases with semantic versioning."
    print_warning "Remember to manually push commits and tags to remote repositories!"
    echo ""

    # Run semantic release for API (creates local commit and tag)
    cd "$CASHIO_API_DIR"
    print_header "Creating API Release"
    source .venv/bin/activate
    python build.py
    deactivate
    API_VERSION=$(python -c "import app.version; print(app.version.__version__)")
    API_COMMIT=$(git rev-parse HEAD)
    print_success "API released with version: $API_VERSION (commit: $API_COMMIT)"

    # Run semantic release for UI (creates local commit and tag)
    cd "$CASHIO_UI_DIR"
    print_header "Creating UI Release"
    node build.cjs
    UI_VERSION=$(node -p "require('./package.json').version")
    UI_COMMIT=$(git rev-parse HEAD)
    print_success "UI released with version: $UI_VERSION (commit: $UI_COMMIT)"

    print_header "Release Summary"
    echo -e "${GREEN}✓ API v$API_VERSION created locally${NC}"
    echo -e "${GREEN}✓ UI v$UI_VERSION created locally${NC}"
    echo ""
    print_warning "Next steps (manual):"
    echo -e "${YELLOW}1. Push API repository:${NC}"
    echo "   cd $CASHIO_API_DIR"
    echo "   git push origin main"
    echo "   git push origin v$API_VERSION"
    echo ""
    echo -e "${YELLOW}2. Push UI repository:${NC}"
    echo "   cd $CASHIO_UI_DIR"
    echo "   git push origin main"
    echo "   git push origin v$UI_VERSION"
}

# Function to update submodules to latest tags
update_submodules() {
    print_header "Updating Submodules to Latest Tags"

    # Disable detached HEAD warning
    git config advice.detachedHead false

    # Update cashio-api
    print_warning "Updating cashio-api submodule..."
    cd "$CASHIO_DIR"/cashio-api
    git fetch --tags
    LATEST_API_TAG=$(git tag -l --sort=-v:refname | head -n 1)
    if [ -z "$LATEST_API_TAG" ]; then
        print_error "No tags found for cashio-api. Skipping update."
    else
        git checkout "$LATEST_API_TAG"
        print_success "cashio-api updated to tag $LATEST_API_TAG"
    fi
    cd "$CASHIO_DIR"

    # Update cashio-ui
    print_warning "Updating cashio-ui submodule..."
    cd "$CASHIO_DIR"/cashio-ui
    git fetch --tags
    LATEST_UI_TAG=$(git tag -l --sort=-v:refname | head -n 1)
    if [ -z "$LATEST_UI_TAG" ]; then
        print_error "No tags found for cashio-ui. Skipping update."
    else
        git checkout "$LATEST_UI_TAG"
        print_success "cashio-ui updated to tag $LATEST_UI_TAG"
    fi
    cd "$CASHIO_DIR"

    # Commit the changes
    print_warning "Committing submodule updates..."
    git add cashio-api cashio-ui
    git commit -m "chore: update submodules to latest tags"
    print_success "Submodule updates committed"
}

# Function to show status
status() {
    print_header "Development Environment Status"

    # Check Docker containers
    cd "$CASHIO_DIR"
    echo -e "${BLUE}Docker Services:${NC}"
    docker compose ps

    echo ""
    echo -e "${BLUE}Submodule Status:${NC}"
    git submodule status

    echo ""
    echo -e "${BLUE}Local Development Servers:${NC}"
    if [ -f /tmp/cashio-api.pid ] && kill -0 $(cat /tmp/cashio-api.pid) 2>/dev/null; then
        print_success "API server running (PID: $(cat /tmp/cashio-api.pid))"
    else
        echo "API server: stopped"
    fi

    if [ -f /tmp/cashio-ui.pid ] && kill -0 $(cat /tmp/cashio-ui.pid) 2>/dev/null; then
        print_success "UI server running (PID: $(cat /tmp/cashio-ui.pid))"
    else
        echo "UI server: stopped"
    fi
}

# Function to show help
show_help() {
    echo "Cashio Development Workflow Script"
    echo ""
    echo "Usage: $0 <command>"
    echo ""
    echo "Commands:"
    echo "  setup-dev         Set up development environment (copy .env files)"
    echo "  setup-certs       Generate SSL certificates for development"
    echo "  start-local       Start local development servers (API & UI locally, DB in Docker)"
    echo "  stop-local        Stop local development servers"
    echo "  test-integration  Test full integration with current submodule code"
    echo "  cleanup-test      Clean up after integration test"
    echo "  restore-database  Restore database from backup"
    echo "  release           Run semantic release locally (creates versions and tags)"
    echo "  update-submodules Update submodules to their latest tags"
    echo "  status            Show status of services and submodules"
    echo "  help              Show this help message"
    echo ""
    echo "Development Workflow:"
    echo "  1. Run 'setup-dev' to initialize environment"
    echo "  2. Run 'setup-certs' to generate certificates"
    echo "  3. Use 'start-local' for day-to-day development"
    echo "  4. Use 'test-integration' before releasing"
    echo "  5. Use 'release' to create new versions (then manually push)"
    echo "  6. Use 'update-submodules' to update backend and frontend to latest tags (then manually push)"
}

# Main script logic
case "${1:-}" in
    setup-dev)
        setup_dev
        ;;
    setup-certs)
        setup_certs
        ;;
    start-local)
        start_local
        ;;
    stop-local)
        stop_local
        ;;
    test-integration)
        test_integration
        ;;
    cleanup-test)
        cleanup_test
        ;;
    restore-database)
        restore_database
        ;;
    release)
        release
        ;;
    update-submodules)
        update_submodules
        ;;
    status)
        status
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_error "Unknown command: ${1:-}"
        echo ""
        show_help
        exit 1
        ;;
esac
